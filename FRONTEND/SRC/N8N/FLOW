{
  "name": "Dev IA Maker â€” CRUD Messages + Auth",
  "nodes": [
    {
      "parameters": {
        "path": "api/auth/login",
        "options": {
          "responseData": "={{$json}}",
          "responseCode": 200
        }
      },
      "id": "WebhookLogin",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        200,
        -200
      ],
      "webhookMethods": {
        "POST": true
      }
    },
    {
      "parameters": {
        "functionCode": "// Validate user and issue JWT\nconst body = $json;\nif (!body.username || !body.password) {\n  $execution.setStatus(400);\n  return [{\n    headers: {'Content-Type': 'application/problem+json'},\n    body: {\n      type: 'https://example.com/probs/invalid-input',\n      title: 'Invalid input',\n      status: 400,\n      detail: 'username and password are required',\n      instance: '/api/auth/login',\n      invalid_params: [\n        ...(body.username ? [] : [{name:'username', reason:'required'}]),\n        ...(body.password ? [] : [{name:'password', reason:'required'}])\n      ],\n      extras: { requestId: $execution.id }\n    }\n  }];\n}\n\nif (body.username !== 'candidate' || body.password !== 'secret') {\n  $execution.setStatus(401);\n  return [{\n    headers: {'Content-Type': 'application/problem+json'},\n    body: {\n      type: 'https://example.com/probs/unauthorized',\n      title: 'Unauthorized',\n      status: 401,\n      detail: 'Invalid credentials',\n      instance: '/api/auth/login',\n      extras: { requestId: $execution.id }\n    }\n  }];\n}\n\nconst jwt = require('jsonwebtoken');\nconst token = jwt.sign({ sub: 'candidate', roles: ['user'] }, $env.JWT_SECRET || 'supersecret', { expiresIn: '1h' });\n\nreturn [{\n  headers: {'Content-Type': 'application/json'},\n  body: { accessToken: token, tokenType: 'Bearer', expiresIn: 3600 }\n}];\n"
      },
      "id": "FnLogin",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        480,
        -200
      ]
    },
    {
      "parameters": {},
      "id": "RespondLogin",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        760,
        -200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extract and verify JWT from Authorization header\nconst auth = $headers.authorization || $headers.Authorization || '';\nif (!auth.startsWith('Bearer ')) {\n  $execution.setStatus(401);\n  return [{\n    headers: {'Content-Type': 'application/problem+json'},\n    body: {\n      type: 'https://example.com/probs/unauthorized',\n      title: 'Unauthorized',\n      status: 401,\n      detail: 'Missing Bearer token',\n      instance: $binary?.request?.url || '/api/messages',\n      extras: { requestId: $execution.id }\n    }\n  }];\n}\n\nconst token = auth.replace('Bearer ', '').trim();\ntry {\n  const jwt = require('jsonwebtoken');\n  const decoded = jwt.verify(token, $env.JWT_SECRET || 'supersecret');\n  // expose user for downstream\n  return [ { body: { user: decoded } } ];\n} catch (e) {\n  $execution.setStatus(401);\n  return [{\n    headers: {'Content-Type': 'application/problem+json'},\n    body: {\n      type: 'https://example.com/probs/unauthorized',\n      title: 'Unauthorized',\n      status: 401,\n      detail: 'Invalid or expired token',\n      instance: $binary?.request?.url || '/api/messages',\n      extras: { requestId: $execution.id }\n    }\n  }];\n}"
      },
      "id": "FnAuth",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        460,
        200
      ]
    },
    {
      "parameters": {
        "path": "api/messages",
        "options": {
          "responseData": "={{$json}}",
          "responseCode": 200
        }
      },
      "id": "WebhookMessages",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        200,
        200
      ],
      "webhookMethods": {
        "GET": true,
        "POST": true
      }
    },
    {
      "parameters": {
        "url": "={{$env.SUPABASE_REST_URL}}/messages",
        "options": {
          "queryParametersUi": {
            "parameter": [
              {
                "name": "select",
                "value": "*"
              },
              {
                "name": "order",
                "value": "created_at.desc"
              }
            ]
          },
          "headersUi": {
            "parameter": [
              {
                "name": "apikey",
                "value": "={{$env.SUPABASE_SERVICE_ROLE}}"
              },
              {
                "name": "Authorization",
                "value": "Bearer {{$env.SUPABASE_SERVICE_ROLE}}"
              }
            ]
          }
        }
      },
      "id": "HttpList",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        760,
        80
      ]
    },
    {
      "parameters": {
        "functionCode": "// basic zod-like validation inline\nconst p = $json;\nconst invalid = [];\nif (!p.title) invalid.push({name:'title', reason:'required'});\nif (!p.body) invalid.push({name:'body', reason:'required'});\nif (p.body && String(p.body).length < 10) invalid.push({name:'body', reason:'minLength 10'});\nif (invalid.length) {\n  $execution.setStatus(400);\n  return [{\n    headers: {'Content-Type': 'application/problem+json'},\n    body: {\n      type: 'https://example.com/probs/invalid-input',\n      title: 'Invalid input',\n      status: 400,\n      detail: 'One or more fields failed validation',\n      instance: '/api/messages',\n      invalid_params: invalid,\n      extras: { requestId: $execution.id }\n    }\n  }];\n}\nreturn [{ body: p }];\n"
      },
      "id": "FnValidateCreate",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        480,
        320
      ]
    },
    {
      "parameters": {
        "url": "={{$env.SUPABASE_REST_URL}}/messages",
        "options": {
          "headersUi": {
            "parameter": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Prefer",
                "value": "return=representation"
              },
              {
                "name": "apikey",
                "value": "={{$env.SUPABASE_SERVICE_ROLE}}"
              },
              {
                "name": "Authorization",
                "value": "Bearer {{$env.SUPABASE_SERVICE_ROLE}}"
              }
            ]
          }
        }
      },
      "id": "HttpCreate",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        760,
        320
      ]
    },
    {
      "parameters": {},
      "id": "RespondMessages",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1060,
        200
      ]
    },
    {
      "parameters": {
        "path": "api/messages/:id",
        "options": {
          "responseData": "={{$json}}",
          "responseCode": 200
        }
      },
      "id": "WebhookMessageId",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        200,
        560
      ],
      "webhookMethods": {
        "GET": true,
        "PUT": true,
        "PATCH": true,
        "DELETE": true
      }
    },
    {
      "parameters": {
        "url": "={{$env.SUPABASE_REST_URL}}/messages",
        "options": {
          "queryParametersUi": {
            "parameter": [
              {
                "name": "id",
                "value": "eq.{{$params.id}}"
              },
              {
                "name": "select",
                "value": "*"
              }
            ]
          },
          "headersUi": {
            "parameter": [
              {
                "name": "apikey",
                "value": "={{$env.SUPABASE_SERVICE_ROLE}}"
              },
              {
                "name": "Authorization",
                "value": "Bearer {{$env.SUPABASE_SERVICE_ROLE}}"
              }
            ]
          }
        }
      },
      "id": "HttpGetById",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        760,
        520
      ]
    },
    {
      "parameters": {
        "functionCode": "const p = $json;\nconst invalid = [];\nif ($method === 'PUT') {\n  if (!p.title) invalid.push({name:'title', reason:'required'});\n  if (!p.body) invalid.push({name:'body', reason:'required'});\n}\nif (p.body && String(p.body).length < 10) invalid.push({name:'body', reason:'minLength 10'});\nif (invalid.length) {\n  $execution.setStatus(400);\n  return [{\n    headers: {'Content-Type': 'application/problem+json'},\n    body: {\n      type: 'https://example.com/probs/invalid-input',\n      title: 'Invalid input',\n      status: 400,\n      detail: 'One or more fields failed validation',\n      instance: '/api/messages/'+($params?.id || ''),\n      invalid_params: invalid,\n      extras: { requestId: $execution.id }\n    }\n  }];\n}\nreturn [{ body: p }];\n"
      },
      "id": "FnValidateUpdate",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        480,
        700
      ]
    },
    {
      "parameters": {
        "url": "={{$env.SUPABASE_REST_URL}}/messages?id=eq.{{$params.id}}",
        "options": {
          "headersUi": {
            "parameter": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Prefer",
                "value": "return=representation"
              },
              {
                "name": "apikey",
                "value": "={{$env.SUPABASE_SERVICE_ROLE}}"
              },
              {
                "name": "Authorization",
                "value": "Bearer {{$env.SUPABASE_SERVICE_ROLE}}"
              }
            ]
          }
        }
      },
      "id": "HttpUpdate",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        760,
        700
      ]
    },
    {
      "parameters": {
        "url": "={{$env.SUPABASE_REST_URL}}/messages?id=eq.{{$params.id}}",
        "options": {
          "headersUi": {
            "parameter": [
              {
                "name": "apikey",
                "value": "={{$env.SUPABASE_SERVICE_ROLE}}"
              },
              {
                "name": "Authorization",
                "value": "Bearer {{$env.SUPABASE_SERVICE_ROLE}}"
              }
            ]
          }
        }
      },
      "id": "HttpDelete",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        760,
        860
      ]
    },
    {
      "parameters": {
        "functionCode": "// For DELETE, return 204 No Content shape\n$execution.setStatus(204);\nreturn [{ body: null }];\n"
      },
      "id": "FnDeleteRespond",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1060,
        860
      ]
    },
    {
      "parameters": {},
      "id": "RespondMessageId",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1060,
        620
      ]
    }
  ],
  "connections": {
    "WebhookLogin": {
      "main": [
        [
          {
            "node": "FnLogin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FnLogin": {
      "main": [
        [
          {
            "node": "RespondLogin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WebhookMessages": {
      "main": [
        [
          {
            "node": "FnAuth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FnAuth": {
      "main": [
        [
          {
            "node": "HttpList",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "FnValidateCreate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HttpList": {
      "main": [
        [
          {
            "node": "RespondMessages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FnValidateCreate": {
      "main": [
        [
          {
            "node": "HttpCreate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HttpCreate": {
      "main": [
        [
          {
            "node": "RespondMessages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WebhookMessageId": {
      "main": [
        [
          {
            "node": "FnAuth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HttpGetById": {
      "main": [
        [
          {
            "node": "RespondMessageId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FnValidateUpdate": {
      "main": [
        [
          {
            "node": "HttpUpdate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HttpUpdate": {
      "main": [
        [
          {
            "node": "RespondMessageId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HttpDelete": {
      "main": [
        [
          {
            "node": "FnDeleteRespond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
